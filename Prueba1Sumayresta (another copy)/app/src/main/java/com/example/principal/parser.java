
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.example.principal;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\007\000\002\002" +
    "\007\000\002\002\007\000\002\002\007\000\002\002\007" +
    "\000\002\002\007\000\002\002\005\000\002\004\011\000" +
    "\002\005\013\000\002\006\015\000\002\003\002\000\002" +
    "\003\003\000\002\007\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\005\000\002\007\003\000\002\010\003" +
    "\000\002\010\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\020\003\007\004\005\005\010\006\004\007" +
    "\006\010\013\011\012\001\002\000\004\012\114\001\002" +
    "\000\004\012\110\001\002\000\004\012\073\001\002\000" +
    "\004\013\071\001\002\000\004\012\056\001\002\000\004" +
    "\002\055\001\002\000\004\012\051\001\002\000\004\012" +
    "\014\001\002\000\006\012\021\023\015\001\002\000\016" +
    "\013\uffef\014\uffef\015\uffef\016\uffef\017\uffef\020\uffef\001" +
    "\002\000\016\013\ufff0\014\ufff0\015\044\016\042\017\041" +
    "\020\043\001\002\000\004\014\027\001\002\000\004\013" +
    "\024\001\002\000\006\012\021\023\015\001\002\000\004" +
    "\013\023\001\002\000\016\013\uffee\014\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\001\002\000\022\002\ufff6\003\007" +
    "\004\005\005\010\006\004\007\006\010\013\011\012\001" +
    "\002\000\004\002\ufff5\001\002\000\004\002\ufffc\001\002" +
    "\000\006\012\021\023\015\001\002\000\004\014\031\001" +
    "\002\000\006\012\021\023\015\001\002\000\004\014\033" +
    "\001\002\000\006\012\021\023\015\001\002\000\004\014" +
    "\035\001\002\000\006\012\021\023\015\001\002\000\004" +
    "\014\037\001\002\000\004\021\040\001\002\000\004\013" +
    "\ufff7\001\002\000\006\012\021\023\015\001\002\000\006" +
    "\012\021\023\015\001\002\000\006\012\021\023\015\001" +
    "\002\000\006\012\021\023\015\001\002\000\006\013\ufff4" +
    "\014\ufff4\001\002\000\006\013\ufff1\014\ufff1\001\002\000" +
    "\006\013\ufff3\014\ufff3\001\002\000\006\013\ufff2\014\ufff2" +
    "\001\002\000\004\022\052\001\002\000\004\013\053\001" +
    "\002\000\022\002\ufff6\003\007\004\005\005\010\006\004" +
    "\007\006\010\013\011\012\001\002\000\004\002\ufffb\001" +
    "\002\000\004\002\001\001\002\000\006\012\021\023\015" +
    "\001\002\000\004\014\063\001\002\000\004\013\061\001" +
    "\002\000\022\002\ufff6\003\007\004\005\005\010\006\004" +
    "\007\006\010\013\011\012\001\002\000\004\002\uffff\001" +
    "\002\000\006\012\021\023\015\001\002\000\004\014\065" +
    "\001\002\000\006\012\021\023\015\001\002\000\004\014" +
    "\067\001\002\000\004\021\070\001\002\000\004\013\ufff9" +
    "\001\002\000\020\003\007\004\005\005\010\006\004\007" +
    "\006\010\013\011\012\001\002\000\004\002\ufffa\001\002" +
    "\000\006\012\021\023\015\001\002\000\004\014\100\001" +
    "\002\000\004\013\076\001\002\000\022\002\ufff6\003\007" +
    "\004\005\005\010\006\004\007\006\010\013\011\012\001" +
    "\002\000\004\002\ufffd\001\002\000\006\012\021\023\015" +
    "\001\002\000\004\014\102\001\002\000\006\012\021\023" +
    "\015\001\002\000\004\014\104\001\002\000\006\012\021" +
    "\023\015\001\002\000\004\014\106\001\002\000\004\021" +
    "\107\001\002\000\004\013\ufff8\001\002\000\006\012\021" +
    "\023\015\001\002\000\004\013\112\001\002\000\022\002" +
    "\ufff6\003\007\004\005\005\010\006\004\007\006\010\013" +
    "\011\012\001\002\000\004\002\000\001\002\000\006\012" +
    "\021\023\015\001\002\000\004\013\116\001\002\000\022" +
    "\002\ufff6\003\007\004\005\005\010\006\004\007\006\010" +
    "\013\011\012\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\004\002\010\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\006\017\007\016\010\015\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\021\010\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\024\003\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\027\010\015" +
    "\001\001\000\002\001\001\000\006\007\031\010\015\001" +
    "\001\000\002\001\001\000\006\007\033\010\015\001\001" +
    "\000\002\001\001\000\006\007\035\010\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\007\047\010\015\001\001\000\006\007\046\010\015\001" +
    "\001\000\006\007\045\010\015\001\001\000\006\007\044" +
    "\010\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\002\024\003\053\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\004\057\007\056\010\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\002" +
    "\024\003\061\001\001\000\002\001\001\000\006\007\063" +
    "\010\015\001\001\000\002\001\001\000\006\007\065\010" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\002\071\001\001\000\002\001\001\000" +
    "\010\005\074\007\073\010\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\002\024\003\076\001\001\000" +
    "\002\001\001\000\006\007\100\010\015\001\001\000\002" +
    "\001\001\000\006\007\102\010\015\001\001\000\002\001" +
    "\001\000\006\007\104\010\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\110\007" +
    "\056\010\015\001\001\000\002\001\001\000\006\002\024" +
    "\003\112\001\001\000\002\001\001\000\010\005\114\007" +
    "\073\010\015\001\001\000\002\001\001\000\006\002\024" +
    "\003\116\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



public parser(Lexico entrada){
	super(entrada);	
}
public void getInfo(){
	manejadorInstrucciones.getInfo();
	reporte.getInfo();
}
public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error");
	if(info instanceof java_cup.runtime.Symbol){
		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		if(s.left >=0){
			m.append("en linea "+(s.left+1));
			if(s.right >=0){
				m.append("columna "+(s.right+1));
			}
		}
		m.append(": "+message);
	}
	System.out.println(m);
}
public void agregarReportesLexicos(List <String[]>lexicos){
	reporte.agregarErroresLexicos(lexicos);
}
public void syntax_error(Symbol cur_token){
    List<Integer> ids = this.expected_token_ids();
    String salida = "Error sintactico token :"+symbl_name_from_id(cur_token.sym);
    if(cur_token.value!=null)salida+=" Valor: "+cur_token.value.toString();
    salida+="\n Se esperaba: ";
    for (Integer e:ids){
        salida+= symbl_name_from_id(e)+"\n";
    }
    reporte.agregarReporte("error","sintactico",salida,(cur_token.left+1),(cur_token.right+1));
    //System.out.println(salida);
}
public void report_fatal_error(String message, Object info){
	//System.out.println("Error irrecuperable");
}
private ManejadorIns manejadorInstrucciones = new ManejadorIns();
private Reportes reporte = new Reportes();
private String ocurrenciaOperador = "";
private String ocurrenciaOperador1 [] = new String[3];
public boolean existeError (){
	return reporte.existenErroresSintacticos();
} 

public ManejadorIns getInstrucciones(){
	return manejadorInstrucciones;
}
public Reportes getReportes (){
	return reporte;
}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S0 EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S0 ::= ICIRCULO PA S1 PC S4 
            {
              Object RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericoConvertidor o1 = (GenericoConvertidor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	manejadorInstrucciones.addInsCirculo(o1,"circulo");
	reporte.agregarReporte("circulo");
	reporte.agregarReporte(o1.getColor());
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S0 ::= ICUADRADO PA S1 PC S4 
            {
              Object RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericoConvertidor o1 = (GenericoConvertidor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	manejadorInstrucciones.addInsCuadrado(o1,"cuadrado");
	reporte.agregarReporte("cuadrado");
	reporte.agregarReporte(o1.getColor());	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S0 ::= IRECTANGULO PA S2 PC S4 
            {
              Object RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericoConvertidor o1 = (GenericoConvertidor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	manejadorInstrucciones.addInsRectangulo(o1,"rectangulo");
	reporte.agregarReporte("rectangulo");
	reporte.agregarReporte(o1.getColor());	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // S0 ::= ILINEA PA S2 PC S4 
            {
              Object RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericoConvertidor o1 = (GenericoConvertidor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	manejadorInstrucciones.addInsLinea(o1,"linea");
	reporte.agregarReporte("linea");
	reporte.agregarReporte(o1.getColor());	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // S0 ::= IPOLIGONO PA S3 PC S4 
            {
              Object RESULT =null;
		int o1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int o1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		GenericoConvertidor o1 = (GenericoConvertidor)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	manejadorInstrucciones.addInsPoligono(o1,"poligono");
	reporte.agregarReporte("poligono");
	reporte.agregarReporte(o1.getColor());	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // S0 ::= IANIMAR PA animacion PC S4 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
	reporte.agregarReporte(a);	
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // S0 ::= error PC S0 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S0",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // S1 ::= S5 COMA S5 COMA S5 COMA color 
            {
              GenericoConvertidor RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double d2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new GenericoConvertidor(new Double []{d1,d2,d3},c);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S1",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // S2 ::= S5 COMA S5 COMA S5 COMA S5 COMA color 
            {
              GenericoConvertidor RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double d2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double d3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int d4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d4 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new GenericoConvertidor(new Double []{d1,d2,d3,d4},c);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S2",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // S3 ::= S5 COMA S5 COMA S5 COMA S5 COMA S5 COMA color 
            {
              GenericoConvertidor RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Double d2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Double d3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int d4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int d4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double d4 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int d5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d5 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
	RESULT = new GenericoConvertidor(new Double []{d1,d2,d3,d4,d5},c);
	
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S3",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // S4 ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S4",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // S4 ::= S0 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("S4",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // S5 ::= S6 DIV S5 
            {
              Double RESULT =null;
		int d8left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d8right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d8 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d9left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d9right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d9 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (d8/d9);
		ocurrenciaOperador1[0]=""+d8;
		ocurrenciaOperador1[1]="/";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","division",ocurrenciaOperador,d9left,d9right);
		ocurrenciaOperador="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // S5 ::= S6 MULT S5 
            {
              Double RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d5 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (d1*d5);
		ocurrenciaOperador1[0]=""+d1;
		ocurrenciaOperador1[1]="*";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","multiplicacion",ocurrenciaOperador,d5left,d5right);
		ocurrenciaOperador="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // S5 ::= S6 RES S5 
            {
              Double RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int d6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d6 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (d2-d6);
		ocurrenciaOperador1[0]=""+d2;
		ocurrenciaOperador1[1]="-";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","resta",ocurrenciaOperador,d6left,d6right);
		ocurrenciaOperador="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // S5 ::= S6 SUM S5 
            {
              Double RESULT =null;
		int d3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int d3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d3 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object s = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int d7left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d7right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d7 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = (d3+d7);			
		ocurrenciaOperador1[0]=""+d3;
		ocurrenciaOperador1[1]="+";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","suma",ocurrenciaOperador,d7left,d7right);
		ocurrenciaOperador="";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // S5 ::= S6 
            {
              Double RESULT =null;
		int d4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d4 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d4;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S5",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // S6 ::= digito 
            {
              Double RESULT =null;
		int d1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int d1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = d1;
		ocurrenciaOperador=""+d1;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // S6 ::= PA S5 PC 
            {
              Double RESULT =null;
		int d2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int d2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double d2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = d2;ocurrenciaOperador="(";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("S6",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
