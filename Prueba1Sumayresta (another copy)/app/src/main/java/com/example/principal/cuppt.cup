package com.example.principal;

import java_cup.runtime.*;
import java.util.List;
import java.util.ArrayList;
parser code{:
public parser(Lexico entrada){
	super(entrada);	
}
public void getInfo(){
	manejadorInstrucciones.getInfo();
	reporte.getInfo();
}
public void report_error(String message, Object info) {
	StringBuffer m = new StringBuffer("Error");
	if(info instanceof java_cup.runtime.Symbol){
		java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
		if(s.left >=0){
			m.append("en linea "+(s.left+1));
			if(s.right >=0){
				m.append("columna "+(s.right+1));
			}
		}
		m.append(": "+message);
	}
	System.out.println(m);
}
public void agregarReportesLexicos(List <String[]>lexicos){
	reporte.agregarErroresLexicos(lexicos);
}
public void syntax_error(Symbol cur_token){
    List<Integer> ids = this.expected_token_ids();
    String salida = "Error sintactico token :"+symbl_name_from_id(cur_token.sym);
    if(cur_token.value!=null)salida+=" Valor: "+cur_token.value.toString();
    salida+="\n Se esperaba: ";
    for (Integer e:ids){
        salida+= symbl_name_from_id(e)+"\n";
    }
    reporte.agregarReporte("error","sintactico",salida,(cur_token.left+1),(cur_token.right+1));
    //System.out.println(salida);
}
public void report_fatal_error(String message, Object info){
	//System.out.println("Error irrecuperable");
}
private ManejadorIns manejadorInstrucciones = new ManejadorIns();
private Reportes reporte = new Reportes();
private String ocurrenciaOperador = "";
private String ocurrenciaOperador1 [] = new String[3];
public boolean existeError (){
	return reporte.existenErroresSintacticos();
} 

public ManejadorIns getInstrucciones(){
	return manejadorInstrucciones;
}
public Reportes getReportes (){
	return reporte;
}
:}

non terminal S0,S4;
non terminal GenericoConvertidor S1,S2,S3;
non terminal Double S5, S6;

terminal ICIRCULO, ICUADRADO, IRECTANGULO, ILINEA, IPOLIGONO, IANIMAR;
terminal PA, PC, COMA, DIV, MULT, RES, SUM;

terminal String color, animacion;
terminal Double digito;

precedence left SUM,RES;
precedence left MULT,DIV;
precedence left SUM, RES, MULT, DIV;
start with S0;

S0 ::= ICIRCULO PA S1:o1 PC S4
	{:
	manejadorInstrucciones.addInsCirculo(o1,"circulo");
	reporte.agregarReporte("circulo");
	reporte.agregarReporte(o1.getColor());
	:}
	
	|ICUADRADO PA S1:o1  PC S4
	{:
	manejadorInstrucciones.addInsCuadrado(o1,"cuadrado");
	reporte.agregarReporte("cuadrado");
	reporte.agregarReporte(o1.getColor());	
	:}
	
	|IRECTANGULO PA S2:o1 PC S4
	{:
	manejadorInstrucciones.addInsRectangulo(o1,"rectangulo");
	reporte.agregarReporte("rectangulo");
	reporte.agregarReporte(o1.getColor());	
	:}
	
	|ILINEA PA S2:o1 PC S4
	{:
	manejadorInstrucciones.addInsLinea(o1,"linea");
	reporte.agregarReporte("linea");
	reporte.agregarReporte(o1.getColor());	
	:}
	
	|IPOLIGONO PA S3:o1 PC S4
	{:
	manejadorInstrucciones.addInsPoligono(o1,"poligono");
	reporte.agregarReporte("poligono");
	reporte.agregarReporte(o1.getColor());	
	:}
	
	|IANIMAR PA animacion:a PC S4
	{:
	reporte.agregarReporte(a);	
	:}
	
	|error:e PC S0;
	
S1 ::= S5:d1 COMA S5:d2 COMA S5:d3 COMA color:c {:RESULT = new GenericoConvertidor(new Double []{d1,d2,d3},c);:};

S2 ::= S5:d1 COMA S5:d2 COMA S5:d3 COMA S5:d4 COMA color:c
	{:
	RESULT = new GenericoConvertidor(new Double []{d1,d2,d3,d4},c);
	:};

S3 ::= S5:d1 COMA S5:d2 COMA S5:d3 COMA S5:d4 COMA S5:d5 COMA color:c
	{:
	RESULT = new GenericoConvertidor(new Double []{d1,d2,d3,d4,d5},c);
	:};

S4 ::= | S0 ;

S5 ::= S6:d8 DIV S5:d9 {:RESULT = (d8/d9);
		ocurrenciaOperador1[0]=""+d8;
		ocurrenciaOperador1[1]="/";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","division",ocurrenciaOperador,d9left,d9right);
		ocurrenciaOperador="";:}

	|S6:d1 MULT S5:d5 {:RESULT = (d1*d5);
		ocurrenciaOperador1[0]=""+d1;
		ocurrenciaOperador1[1]="*";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","multiplicacion",ocurrenciaOperador,d5left,d5right);
		ocurrenciaOperador="";:}
	
	|S6:d2 RES  S5:d6 {:RESULT = (d2-d6);
		ocurrenciaOperador1[0]=""+d2;
		ocurrenciaOperador1[1]="-";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","resta",ocurrenciaOperador,d6left,d6right);
		ocurrenciaOperador="";:}
	
	|S6:d3 SUM:s  S5:d7 {:RESULT = (d3+d7);			
		ocurrenciaOperador1[0]=""+d3;
		ocurrenciaOperador1[1]="+";
		ocurrenciaOperador1[2]=ocurrenciaOperador;
		ocurrenciaOperador = ocurrenciaOperador1[0]+ocurrenciaOperador1[1]+ocurrenciaOperador1[2];
		reporte.agregarReporte("operador","suma",ocurrenciaOperador,d7left,d7right);
		ocurrenciaOperador="";:}
		
	|S6:d4 {:RESULT = d4;:};

S6 ::= digito: d1 {:RESULT = d1;
		ocurrenciaOperador=""+d1;:} 
|PA S5:d2 PC {:RESULT = d2;ocurrenciaOperador="(";:}; 
